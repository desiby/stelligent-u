AWSTemplateFormatVersion: 2010-09-09

Description: Lamdba hello world function

Resources: 
    MyLambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties: 
        AssumeRolePolicyDocument:
           Version: 2012-10-17
           Statement:
           - Effect: Allow
             Principal:
                Service: lambda.amazonaws.com
             Action: sts:AssumeRole
        Description: Lambda execution role
        ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        RoleName: !Join ["",[!Ref AWS::Region, mylambda-role ]]
        Policies: 
        - PolicyName: "Lambdacw"
          PolicyDocument: 
            Version: '2012-10-17'
            Statement:
            - Sid: "allowlogstream"
              Effect: Allow
              Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${LambdaLogGroup}:log-stream:*" 
        Tags: 
          - Key: user
            Value: desire.bahbioh.labs
          - Key: stelligent-u-lesson
            Value: "9.1"
          - Key: stelligent-u-lab
            Value: "9.1.1"

    MyRoleCloudWatch:
      Type: AWS::IAM::Role
      Properties: 
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
          - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
        AssumeRolePolicyDocument: 
          Version: "2012-10-17"
          Statement: 
            - Effect: "Allow"
              Principal: 
                Service: 
                - "cloudtrail.amazonaws.com"
              Action: 
              - "sts:AssumeRole"

#Trail for logs from s3 bucket
    MyTrail:
        Type: AWS::CloudTrail::Trail
        Properties: 
          #CloudWatchLogsLogGroupArn: String
          #CloudWatchLogsRoleArn: String
          EventSelectors: 
          - DataResources: 
              - Type:  AWS::S3::Object
                Values: 
                  -  arn:aws:s3:::desire.bahbioh.eventsbucket/
            IncludeManagementEvents: true
            ReadWriteType: All
          IsLogging: true
          S3BucketName: desirebahbioh-test-trail-bucket
          Tags: 
          - Key: user
            Value: desire.bahbioh.labs
          - Key: stelligent-u-lesson
            Value: "9.2"
          - Key: stelligent-u-lab
            Value: "9.2.2"
          TrailName: desirebahbioh-trail

#eventbridge rule for the bucket we want to retrieve API calls from
    MyEventBridgeRule:
      Type: AWS::Events::Rule
      Properties: 
        Description: write s3 putOject logs to cloudwatch
        EventPattern: 
          source:
          - aws.s3
          detail-type:
          - "AWS API Call via CloudTrail"
          detail:
            eventSource:
            - s3.amazonaws.com
            eventName:
            - PutObject
            requestParameters:
              bucketName:
              - desire.bahbioh.eventsbucket
        Name: desirebahbioh-eventbridge-s3-rule
        State: ENABLED
        Targets: 
          - Arn: !GetAtt MyLambdaHelloFunction.Arn
            Id: lambda-001

    LambdaInvokePermissionForEvents:
        Type: AWS::Lambda::Permission
        Properties:
          FunctionName: !GetAtt MyLambdaHelloFunction.Arn
          Action: "lambda:InvokeFunction"
          Principal: "events.amazonaws.com"
          SourceArn: !GetAtt MyEventBridgeRule.Arn

#log groups from Lambda function to retrieve logs from cloudwatch via the eventbridge
    LogGroup: 
      Type: AWS::Logs::LogGroup
      Properties: 
        LogGroupName: !Sub "${AWS::StackName}"
        RetentionInDays: 7

    LambdaLogGroup: 
      Type: AWS::Logs::LogGroup
      Properties: 
        LogGroupName: !Sub "/aws/lambda/${AWS::StackName}"
        RetentionInDays: 7
    
    MyLambdaHelloFunction:
        Type: AWS::Lambda::Function
        Properties: 
          Code: /Users/dezbill/stelligent-u/09-lambda/9.2.2/
          Handler: lambda_function.lambda_handler
          Description: Hello World function
          Role: !GetAtt MyLambdaExecutionRole.Arn 
          Runtime: python3.8
          FunctionName: desirebahbioh-lambda
          Tags: 
          - Key: user
            Value: desire.bahbioh.labs
          - Key: stelligent-u-lesson
            Value: "9.2"
          - Key: stelligent-u-lab
            Value: "9.2.2"
          TracingConfig:
              Mode: Active
    
    MyDynamoDBTable:
        Type: AWS::DynamoDB::Table
        Properties: 
          AttributeDefinitions: 
            - AttributeName: id
              AttributeType: "S"
            - AttributeName: object
              AttributeType: "S"
          BillingMode: PAY_PER_REQUEST
          KeySchema: 
            - AttributeName: id
              KeyType: HASH
            - AttributeName: object
              KeyType: RANGE
          TableName: s3log
          Tags: 
          - Key: user
            Value: desire.bahbioh.labs
          - Key: stelligent-u-lesson
            Value: '9.2'
          - Key: stelligent-u-lab
            Value: '9.2.2'

    MyLambdaHelloGETObject:
        Type: AWS::Lambda::Function
        Properties: 
          Code: /Users/dezbill/stelligent-u/09-lambda/9.2.3/
          Handler: lambda_function.lambda_handler
          Description: Query data with api gateway
          Role: !GetAtt MyLambdaExecutionRole.Arn 
          Runtime: python3.8
          FunctionName: desirebahbioh-lambda-get
          Tags: 
          - Key: user
            Value: desire.bahbioh.labs
          - Key: stelligent-u-lesson
            Value: "9.3"
          - Key: stelligent-u-lab
            Value: "9.2.3"
          TracingConfig:
              Mode: Active
     
    MyLambdaPermission:
      Type: AWS::Lambda::Permission
      Properties: 
        Action: lambda:InvokeFunction
        FunctionName: !Ref MyLambdaHelloGETObject
        Principal: apigateway.amazonaws.com
        SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyRestApi}/*/*'

    MyRestApi:
      Type: 'AWS::ApiGateway::RestApi'
      Properties:
        Description: A test API
        Name: MyRestAPI
        EndpointConfiguration:
          Types: 
          - REGIONAL
        Tags: 
        - Key: user
          Value: desire.bahbioh.labs
        - Key: stelligent-u-lesson
          Value: "9.1"
        - Key: stelligent-u-lab
          Value: "9.1.1"
    
    MyGetMethod:
      Type: 'AWS::ApiGateway::Method'
      Properties:
        RestApiId: !Ref MyRestApi
        ResourceId: !GetAtt MyRestApi.RootResourceId
        HttpMethod: GET                 
        AuthorizationType: NONE
        Integration:
          Type: AWS_PROXY          
          IntegrationHttpMethod: POST
          Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyLambdaHelloGETObject.Arn}/invocations
          

    MyApiGatewayDeployment:
        DependsOn: MyGetMethod 
        Type: AWS::ApiGateway::Deployment
        Properties:
          RestApiId: !Ref MyRestApi
          Description: My deployment
          StageName: dummy

Outputs:
  RestApiID:
    Description: REST API id
    Value: !Ref MyRestApi
  RootResourceID:
    Description: Root resource id
    Value: !GetAtt MyRestApi.RootResourceId
    